%!PS-Adobe-3.0
%%Title: httpwebserver.c
%%For: 
%%Creator: a2ps version 4.14
%%CreationDate: Wed Apr 24 16:03:07 2024
%%BoundingBox: 24 24 571 818
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 4
%%PageOrder: Ascend
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed strings
% Version 1.2 1/31/1990
% Original Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 595 def
/sw 842 def
/llx 24 def
/urx 818 def
/ury 571 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 8.005733 def
/cw 4.803440 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   501.959430 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/******************************************************************************) c n
( * HTTP Server) N
( * CPE 3300, Daniel Nimsgern) N
( * ) N
( * This HTTP server uses the machines port 80 to serve a HTML web page that) N
( * utilizes text images and audio. Once the client returns the requested values) N
( * the server saves those values and serves a new text and audio HTML page.) N
( * ) N
( * I had many challenges thought the development many around where to start) N
( * when parsing the the HTTP request but with the help of stack overflow and ) N
( * Zach I was able to come up with a method that works. I then did debugging) N
( * using valgrind and Microsoft CoPilot which was able to easily read my files) N
( * and tell me exactly what was wrong and give a suggestion on how to fix it.) N
( * almost every fix it suggested needed some tweaking to fit more with how I) N
( * wanted the program to operate but I was pleasantly surprised how well) N
( * CoPilot worked as a debugging assistant.) N
( *) N
( * Build with gcc -o httpwebserver httpwebserver.c) N
( *****************************************************************************/) N
() p n
(/*=============================================================================) c n
( |          Includes) N
( ============================================================================*/) N
() p n
(#include) K
( <stdio.h>) p n
(#include) K
( <stdlib.h>) p n
(#include) K
( <unistd.h>) p n
(#include) K
( <string.h>) p n
(#include) K
( <arpa/inet.h>) p n
(#include) K
( <bits/getopt_core.h>) p n
(#include) K
( <netinet/in.h>) p n
(#include) K
( <sys/socket.h>) p n
(#include) K
( <sys/types.h>) p n
() N
(/*=============================================================================) c n
( |          Global Variables) N
( ============================================================================*/) N
() p n
(/* HTTP definitions */) c n
(#define) K
( DEFAULT_HTTP_PORT   \() p
(int) k
(\)   80) p n
(#define) K
( HTTP_MAX_MSG_SIZE   \() p
(int) k
(\)   1000000) p n
(#define) K
( HTTP_BASE_PATH) p 24 T () S 32 T (\() S
(char) k
(*\) ") p
(./httpfiles) str
(") p n
(#define) K
( MAX_PATH_LENGTH) p 24 T () S 32 T (\() S
(int) k
(\)) p 40 T (1000) N
(#define) K
( GET_REQUEST) p 24 T () S 32 T () S 40 T (\() S
(char) k
(*\) ") p
(GET) str
(") p n
(#define) K
( PUT_REQUEST) p 24 T () S 32 T () S 40 T (\() S
(char) k
(*\) ") p
(PUT) str
(") p n
() N
(/* CLI ESC Codes */) c n
(#define) K
( ESC_BLACK_TXT       \() p
(char) k
(*\) ") p
(\\033[1;30m) str
(") p n
(#define) K
( ESC_RED_TXT         \() p
(char) k
(*\) ") p
(\\033[1;31m) str
(") p n
(#define) K
( ESC_GREEN_TXT       \() p
(char) k
(*\) ") p
(\\033[1;32m) str
(") p n
(#define) K
( ESC_YELLOW_TXT      \() p
(char) k
(*\) ") p
(\\033[1;33m) str
(") p n
(#define) K
( ESC_BLUE_TXT        \() p
(char) k
(*\) ") p
(\\033[1;34m) str
(") p n
(#define) K
( ESC_MAGENTA_TXT     \() p
(char) k
(*\) ") p
(\\033[1;35m) str
(") p n
(#define) K
( ESC_CYAN_TXT        \() p
(char) k
(*\) ") p
(\\033[1;36m) str
(") p n
(#define) K
( ESC_WHITE_TXT       \() p
(char) k
(*\) ") p
(\\033[1;37m) str
(") p n
(#define) K
( ESC_BR_GRAY_TXT     \() p
(char) k
(*\) ") p
(\\033[1;90m) str
(") p n
(#define) K
( ESC_BR_RED_TXT      \() p
(char) k
(*\) ") p
(\\033[1;91m) str
(") p n
(#define) K
( ESC_BR_GREEN_TXT    \() p
(char) k
(*\) ") p
(\\033[1;92m) str
(") p n
(#define) K
( ESC_BR_YELLOW_TXT   \() p
(char) k
(*\) ") p
(\\033[1;93m) str
(") p n
(#define) K
( ESC_BR_BLUE_TXT     \() p
(char) k
(*\) ") p
(\\033[1;94m) str
(") p n
(#define) K
( ESC_BR_MAGENTA_TXT  \() p
(char) k
(*\) ") p
(\\033[1;95m) str
(") p n
(#define) K
( ESC_BR_CYAN_TXT     \() p
(char) k
(*\) ") p
(\\033[1;96m) str
(") p n
(httpwebserver.c) (Page 1/7) (Apr 24, 24 16:02) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#define) K
( ESC_BR_WHITE_TXT    \() p
(char) k
(*\) ") p
(\\033[1;97m) str
(") p n
() N
(/*=============================================================================) c n
( |          Function Definitions) N
( ============================================================================*/) N
() p n
(/**) c n
( * @brief Main process - Handles HTTP requests to the server from clients) N
( * ) N
( * @param argc Number of server configuration arguments) N
( * @param argv Array of server configuration arguments) N
( * @return int Program exit value) N
( */) N
(int) k
( main\() p
(int) k
( argc, ) p
(char) k
(** argv\) {) p n
() N
() S 8 T () S
(// Local Variables) c n
() p 8 T () S
(unsigned) k
( ) p
(short) k
( port = DEFAULT_HTTP_PORT; ) p
(// default port) c n
() p 8 T () S
(int) k
( sock; ) p
(// socket descriptor) c n
() p n
(    ) S
(// User argument parsing) c n
(    ) p
(int) k
( c;) p n
(    ) S
(while) K
(\(\(c = getopt\(argc,argv,") p
(p:h) str
("\)\)!=-1\)) p n
(    {) N
() S 8 T () S 16 T () S
(switch) K
(\(c\) ) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T () S
(case) K
( ') p
(p) str
(':) p n
() S 8 T () S 16 T () S 24 T () S 32 T (port = atof\(optarg\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S
(case) K
( ') p
(h) str
(':) p n
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(\\n) str
("\);) p n
(                printf\(") S
(-h prints this help statement\\n\\n) str
("\);) p n
(                printf\(") S
(-p override the HTTP server port \(default: 80\)\\n\\n) str
("\);) p n
() S 8 T () S 16 T (        exit\(1\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T (}) N
() S 8 T (}) N
() N
() S 8 T () S
(// ready to go) c n
() p 8 T (printf\(") S
(HTTP server over TCP configuring on port: %d\\n) str
(",port\);) p n
() S 8 T () N
() S 8 T () S
(// for TCP, we want IP protocol domain \(PF_INET\)) c n
() p 8 T () S
(// and TCP transport type \(SOCK_STREAM\)) c n
() p 8 T () S
(// no alternate protocol - 0, since we have already specified IP) c n
() p 8 T () N
() S 8 T () S
(if) K
( \(\(sock = socket\( PF_INET, SOCK_STREAM, 0 \)\) < 0\) ) p n
() S 8 T ({) N
() S 8 T () S 16 T (perror\(") S
(Error on socket creation) str
("\);) p n
() S 8 T () S 16 T (exit\(1\);) N
() S 8 T (}) N
(  ) N
(  ) S 8 T () S
(// lose the pesky "Address already in use" error message) c n
() p 8 T () S
(int) k
( yes = 1;) p n
() N
() S 8 T () S
(if) K
( \(setsockopt\(sock,SOL_SOCKET,SO_REUSEADDR,&yes,) p
(sizeof) K
(\() p
(int) k
(\)\) == -1\) ) p n
() S 8 T ({) N
() S 8 T () S 16 T (perror\(") S
(setsockopt) str
("\);) p n
() S 8 T () S 16 T (exit\(1\);) N
() S 8 T (}) N
() N
() S 8 T () S
(// establish address - this is the server and will) c n
() p 8 T () S
(// only be listening on the specified port) c n
() p 8 T () S
(struct) k
( sockaddr_in sock_address;) p n
(httpwebserver.c) (Page 2/7) (Apr 24, 24 16:02) title
border
grestore
(Printed by ) rhead
(httpwebserver.c) (1/4) (Wednesday April 24, 2024) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () N
() S 8 T () S
(// address family is AF_INET) c n
() p 8 T () S
(// our IP address is INADDR_ANY \(any of our IP addresses\)) c n
(    ) p
(// the port number is per default or option above) c n
() p n
() S 8 T (sock_address.sin_family = AF_INET;) N
() S 8 T (sock_address.sin_addr.s_addr = htonl\(INADDR_ANY\);) N
() S 8 T (sock_address.sin_port = htons\(port\);) N
() N
() S 8 T () S
(// we must now bind the socket descriptor to the address info) c n
() p 8 T () S
(if) K
( \(bind\(sock, \() p
(struct) k
( sockaddr *\) &sock_address, ) p
(sizeof) K
(\(sock_address\)\)<) p n
(0\)) N
() S 8 T ({) N
() S 8 T () S 16 T (perror\(") S
(Problem binding) str
("\);) p n
() S 8 T () S 16 T (exit\(-1\);) N
() S 8 T (}) N
() S 8 T () N
() S 8 T () S
(// extra step to TCP - listen on the port for a connection) c n
() p 8 T () S
(// willing to queue 5 connection requests) c n
() p 8 T () S
(if) K
( \( listen\(sock, 5\) < 0 \) ) p n
() S 8 T ({) N
() S 8 T () S 16 T (perror\(") S
(Error calling listen\(\)) str
("\);) p n
() S 8 T () S 16 T (exit\(-1\);) N
() S 8 T (}) N
() S 8 T () N
() S 8 T () S
(// go into forever loop and echo whatever message is received) c n
() p 8 T () S
(// to console and back to source) c n
() p 8 T () S
(char) k
(* buffer = calloc\(HTTP_MAX_MSG_SIZE*3, ) p
(sizeof) K
(\() p
(char) k
(\)\);) p n
() S 8 T () S
(char) k
(* command = calloc\(HTTP_MAX_MSG_SIZE, ) p
(sizeof) K
(\() p
(char) k
(\)\);) p n
() S 8 T () S
(char) k
(* query = calloc\(HTTP_MAX_MSG_SIZE, ) p
(sizeof) K
(\() p
(char) k
(\)\);) p n
() S 8 T () S
(char) k
(* version = calloc\(HTTP_MAX_MSG_SIZE, ) p
(sizeof) K
(\() p
(char) k
(\)\);) p n
() S 8 T () S
(struct) k
( sockaddr_in callingDevice;) p n
() S 8 T (socklen_t callingDevice_len;) N
() S 8 T () S
(FILE) k
(* file;) p n
(    ) S
(int) k
( fileLen;) p n
() S 8 T () S
(int) k
( bytesRead;) p n
(    ) S
(int) k
( bytesWritten;) p n
() S 8 T () S
(int) k
( connection;) p n
() S 8 T () N
(    ) S
(while) K
( \(1\) {) p 16 T () S 24 T () S 32 T () N
() S 8 T () S 16 T () S
(// hang in accept and wait for connection) c n
() p 8 T () S 16 T (printf\(") S
(====Waiting====\\n) str
("\);) p n
() S 8 T () S 16 T (connection = accept\(sock, \() S
(struct) k
( sockaddr*\)&callingDevice,) p n
(                            &callingDevice_len\);) N
() S 8 T () S 16 T () S
(if) K
( \(connection < 0\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (perror\(") S
(ERROR on accept) str
("\);) p n
() S 8 T () S 16 T (}) N
() N
(        ) S
(// Fork on connection to allow for multiple client connection) c n
() p 8 T () S 16 T () S
(int) k
( pid = fork\(\);) p n
() S 8 T () S 16 T () S
(if) K
( \(pid < 0\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (perror\(") S
(ERROR on fork) str
("\);) p n
() S 8 T () S 16 T (}) N
() N
(        ) S
(// Child Process) c n
() p 8 T () S 16 T () S
(if) K
( \(pid == 0\)) p n
() S 8 T () S 16 T ({) S 24 T () S 32 T () N
() N
(            close\(sock\);) N
() S 8 T () S 16 T () S 24 T () S
(// ready to r/w - another loop - it will be broken when ) c n
(httpwebserver.c) (Page 3/7) (Apr 24, 24 16:02) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(the) c n
(            ) p
(// connection is closed) c n
() p 8 T () S 16 T () S 24 T () S
(while) K
(\(1\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(char) k
(* filePath = calloc\(MAX_PATH_LENGTH, ) p
(sizeof) K
(\() p
() k n
(char) S
(\)\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(char) k
(* response = calloc\(HTTP_MAX_MSG_SIZE*10, ) p
(si) K n
(zeof) S
(\() p
(char) k
(\)\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(int) k
( incParams = 0;) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(int) k
( responseLen;) p n
() N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(// read message) c n
() p 8 T () S 16 T () S 24 T () S 32 T (bytesRead = read\(connection, buffer, HTTP_MAX_MS) N
(G_SIZE-1\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(bytesRead == 0\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T ({) S 40 T () S
(// socket closed) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T (printf\(") S
(====Client Disconnected====\\n) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (close\(connection\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (free\(buffer\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (free\(command\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (free\(query\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (free\(version\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (free\(filePath\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (free\(response\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(break) K
(;  ) p
(// break the inner while loop) c n
() p 8 T () S 16 T () S 24 T () S 32 T (}) N
() S 8 T () S 16 T () S 24 T () N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(// print info to console) c n
() p 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(Received HTTP request\\n) str
("\);) p n
() N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(// Parse request) c n
() p 8 T () S 16 T () S 24 T () S 32 T (sscanf\(buffer, ") S
(%s %s %s) str
(", command, query, versio) p n
(n\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(%s %s %s\\n) str
(", command, query, version\);) p n
() N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(strchr\(query, ') p
(?) str
('\) != ) p
(NULL) K
(\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (incParams = 1;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (printf\(") S
(detected params\\n) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T () N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(char) k
( path[1000];) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(char) k
( rawparam[1000];) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(char) k
(* param;) p n
() N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(incParams\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(char) k
(* tempPath = strtok\(query, ") p
(?) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (strcpy\(path, tempPath\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (printf\(") S
(Path: %s\\n) str
(", path\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(char) k
(* tempRawparam = strtok\() p
(NULL) K
(, ") p
(?) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (strcpy\(rawparam, tempRawparam\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (printf\(") S
(Parameters: %s\\n) str
(", rawparam\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(else) K n
() p 8 T () S 16 T () S 24 T () S 32 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (strcpy\(path, query\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (printf\(") S
(%s\\n) str
(",path\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T (}) N
() N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(incParams\)) p n
(httpwebserver.c) (Page 4/7) (Apr 24, 24 16:02) title
border
grestore
(Printed by ) rhead
(httpwebserver.c) (2/4) (Wednesday April 24, 2024) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T () S 24 T () S 32 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(FILE) k
(* csv = fopen\(") p
(./httpfiles/cards.csv) str
(", ") p
(a) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(if) K
( \(csv == ) p
(NULL) K
(\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (perror\(") S
(Error opening file!\\n) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (param = strtok\(rawparam, ") S
(&) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(while) K
( \(param != ) p
(NULL) K
(\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S
(char) k
( name[HTTP_MAX_MSG_SIZE], va) p n
(lue[HTTP_MAX_MSG_SIZE];) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S
(if) K
(\(sscanf\(param, ") p
(%[^=]=%s) str
(", nam) p n
(e, value\) == 2\)) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T (printf\(") S
(Parameter: %s = %s\\n) str
(") p n
(, name, value\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T (fprintf\(csv, ") S
(%s,) str
(", valu) p n
(e\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S
(else) K n
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T (printf\(") S
(Failed to parse paramet) str n
(er: %s\\n) S
(", param\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (param = strtok\() S
(NULL) K
(, ") p
(&) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (fprintf\(csv, ") S
(\\n) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (fclose\(csv\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (}) N
() N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(// replace + with spaces) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S
(for) K
( \() p
(int) k
( i = 0; i < strlen\(path\); i++\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(/* replace any + and % with space */) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(if) K
( \(path[i] == ') p
(+) str
('\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S
(/* replace with space */) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (path[i] = ') S
( ) str
(';) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () N
() S 8 T () S 16 T () S 24 T () S 32 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T () N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(// Get file) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(!strcmp\(command, GET_REQUEST\)\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (printf\(") S
(file path preformatted: %s\\n) str
(", path\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(if) K
( \(strcmp\(path, ") p
(/) str
("\) == 0\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (strcpy\(path, ") S
(/index.html) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T (strcat\(filePath, HTTP_BASE_PATH\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (strcat\(filePath, path\);) N
() N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(!strcmp\(command, GET_REQUEST\)\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(/* Requesting file */) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T (printf\(") S
(file path: %s\\n) str
(", filePath\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (file = fopen\(filePath, ") S
(r) str
("\);) p n
() N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(if) K
( \(file\)) p n
(httpwebserver.c) (Page 5/7) (Apr 24, 24 16:02) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S
(/* valid file */) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S
(char) k
(* ext = strrchr\(filePath, ') p
(.) str
() p n
('\);) N
() N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (fseek\(file, 0L, SEEK_END\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (fileLen = ftell\(file\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (rewind\(file\);) N
() N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (snprintf\(response, HTTP_MAX_MSG_) N
(SIZE*10,) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (") S
(%s 200 OK\\r\\nAccept-Ranges: bytes\\r\\nCont) str n
(ent-Type: %s) S
(") p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (") S
(\\r\\nContent-Length: %d\\r\\n\\r\\n) str
(",) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (version, ext + 1, fileLen\);) N
() N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (responseLen = strlen\(response\);) N
() N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (size_t filebytesread = fread\(res) N
(ponse + responseLen, 1,) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (                             fil) N
(eLen, file\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (responseLen += filebytesread;) N
() N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (fclose\(file\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(else) K n
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S
(/* invalid file */) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (snprintf\(response, HTTP_MAX_MSG_) N
(SIZE*6,) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (") S
(%s 404 File Not Found) str
(",) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (version\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (printf\(") S
(%s\\n) str
(", response\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T () N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(// send data to HTTP client) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(\(bytesWritten = write\(connection,) p n
() S 8 T () S 16 T () S 24 T () S 32 T (                          response,) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T () S 64 T () S 72 T () S 80 T () N
(  responseLen\)\) < 0\)) N
() S 8 T () S 16 T () S 24 T () S 32 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (perror\(") S
(Error sending file) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (exit\(-1\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(else) K n
() p 8 T () S 16 T () S 24 T () S 32 T ({) S 40 T () S 48 T () S 56 T () N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (printf\(") S
(Bytes sent: %d\\n) str
(", bytesWritten\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T (}) N
() N
() S 8 T () S 16 T () S 24 T () S 32 T (free\(response\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (free\(filePath\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () N
() S 8 T () S 16 T () S 24 T (}  ) S
(// end of child inner-while) c n
() p 8 T () S 16 T () S 24 T (close\(sock\);) N
() S 8 T () S 16 T () S 24 T (exit\(0\);) N
() S 8 T () S 16 T (}) N
(        ) S
(else) K n
(        {) p n
(            close\(connection\);) N
(        }) N
(httpwebserver.c) (Page 6/7) (Apr 24, 24 16:02) title
border
grestore
(Printed by ) rhead
(httpwebserver.c) (3/4) (Wednesday April 24, 2024) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (7) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    }) p 8 T () S
(// end of outer loop) c n
() p 8 T () S
(// Free request buffers) c n
() p 8 T (free\(buffer\);) N
() S 8 T (free\(command\);) N
() S 8 T (free\(query\);) N
() S 8 T (free\(version\);) N
() N
() S 8 T () S
(// should never get here) c n
() p 8 T () S
(return) K
(\(0\);) p n
(}) N
(httpwebserver.c) (Page 7/7) (Apr 24, 24 16:02) title
border
grestore
(Printed by ) rhead
(httpwebserver.c) (4/4) (Wednesday April 24, 2024) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
